version: '3.5'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    volumes:
      - zoo-stack-data:/tmp/zookeeper
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "2181:2181"
    networks:
      - kafka-net
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 16000
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3

  kafka1:
    image: wurstmeister/kafka:latest
    volumes:
       - kafka-stack-1-logs:/tmp/kafka-logs
       - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - target: 9092
        published: 9092
        protocol: tcp
        mode: ingress
    networks:
       - kafka-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_PORT: 9092
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_CREATE_TOPICS: "tweetsTopic:1:1,sentVen:1:1,sentUSA:1:1,sentRus:1:1,sentChina:1:1,sentIs:1:1,sentGer:1:1,sentJap:1:1,sentIran:1:1,sentBra:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"

  twitter-producer:
    image: kmillanr84/twitter-producer
    networks:
      - kafka-net
    secrets:
      - consumer_key
      - consumer_secret
      - access_key
      - access_secret
    deploy:
      restart_policy:
        condition: on-failure
    environment: 
      CONSUMER_KEY: /run/secrets/consumer_key
      CONSUMER_SECRET: /run/secrets/consumer_secret
      ACCESS_KEY: /run/secrets/access_key
      ACCESS_SECRET: /run/secrets/access_secret
    command: ["sh","-c","dockerize -wait tcp://kafka1:9092 -timeout 30s && python twitter-producer.py"]

  master:
    image: kmillanr84/spark
    hostname: master
    environment:
      MASTER: spark://master:7077
      SPARK_CONF_DIR: /conf
      SPARK_PUBLIC_DNS: localhost
    expose:
      - 7077
    ports:
      - 4040:4040
      - 6066:6066
      - 7077:7077
    volumes:
      - master-logs:/tmp/master-logs
      - ./conf/master:/conf
      - ./data:/tmp/data
    command: ["sh","-c","bin/spark-class org.apache.spark.deploy.master.Master -h master"]

  worker:
    image: kmillanr84/spark
    command: ["sh","-c","bin/spark-class org.apache.spark.deploy.worker.Worker spark://master:7077"]
    hostname: worker
    environment:
      SPARK_CONF_DIR: /conf
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_PUBLIC_DNS: localhost
    links:
      - master
    expose:
      - 8881
      - 8882
      - 8883
    volumes:
      - worker-logs:/tmp/worker-logs
      - ./conf/worker:/conf
      - ./data:/tmp/data

networks:
  kafka-net:

secrets:
  consumer_key:
    external: true
  consumer_secret:
    external: true
  access_key:
    external: true
  access_secret:
    external: true

volumes:
  kafka-stack-1-logs:
  master-logs:
  worker-logs:
  zoo-stack-data: