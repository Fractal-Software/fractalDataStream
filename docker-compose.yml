version: '3.5'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    volumes:
      - zoo-stack-data:/tmp/zookeeper
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "2181:2181"
    networks:
      - kafka-net
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      -  "ZOOKEEPER_CLIENT_PORT=2181"

  kafka1:
    image: wurstmeister/kafka:latest
    volumes:
       - kafka-stack-1-logs:/tmp/kafka-logs
       - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9093:9093"
    links:
      - zookeeper
    networks:
       - kafka-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9093
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE

  kafka2:
    image: wurstmeister/kafka:latest
    volumes:
        - kafka-stack-1-logs:/tmp/kafka-logs
        - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9094:9094"
    links:
      - zookeeper
    networks:
        - kafka-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE

  kafka3:
    image: wurstmeister/kafka:latest
    volumes:
        - kafka-stack-1-logs:/tmp/kafka-logs
        - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9095:9095"
    links:
      - zookeeper
    networks:
        - kafka-net
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9095
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9095
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE

  twitter-producer:
    image: kmillanr84/twitter-producer
    networks:
      - kafka-net
    links:
      - kafka1
      - kafka2
      - kafka3
    secrets:
      - consumer_key
      - consumer_secret
      - access_key
      - access_secret
    deploy:
      restart_policy:
        condition: on-failure
        delay: 20s
    environment: 
      CONSUMER_KEY: /run/secrets/consumer_key
      CONSUMER_SECRET: /run/secrets/consumer_secret
      ACCESS_KEY: /run/secrets/access_key
      ACCESS_SECRET: /run/secrets/access_secret

  # spark-master:
  #   image: kmillanr84/spark-master
  #   ports:
  #     - "8888:8888"
  #     - "7077:7077"
  #   networks:
  #     - kafka-net
  #   deploy:
  #     mode: global
  #     placement:
  #         constraints:
  #             - node.labels.type == spark-master
  #             - node.labels.spark == true
  #   environment:
  #     - INIT_DAEMON_STEP=setup_spark

  # spark-worker-1:
  #   image: bde2020/spark-worker:2.4.5-hadoop2.7
  #   ports:
  #     - "8081:8081"
  #   networks:
  #     - kafka-net
  #   deploy:
  #     mode: global
  #     placement:
  #         constraints: 
  #             - node.labels.type == spark-worker-1
  #             - node.labels.spark == true 
  #   environment:
  #     - "SPARK_MASTER=spark://spark-master:7077"

  # node-backend:
  #   image: kmillanr84/fractal-backend
  #   ports:
  #     - "44444:44444"
  #     - "33334:33334"
  #   networks:
  #       - kafka-net

networks:
  kafka-net:

secrets:
  consumer_key:
    external: true
  consumer_secret:
    external: true
  access_key:
    external: true
  access_secret:
    external: true

volumes:
  kafka-stack-1-logs:
  kafka-stack-2-logs:
  kafka-stack-3-logs:
  zoo-stack-data: